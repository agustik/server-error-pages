# NGINX config

proxy_intercept_errors on; # Intercept errors, and return this error pages

{{#config.nginx.limit_req_status}}
limit_req_status {{config.nginx.limit_req_status}}; ## Standard for rate limit
{{/config.nginx.limit_req_status}}


{{#pages}}
  # Error page {{code}}
  error_page {{code}} {{config.nginx.location_internal}}{{code}}-error.html;
{{/pages}}


  # Add this to nginx.conf
  #  map $http_accept $error_extension {
  #      default html;
  #          ~application/json json;
  #  }


# Location for internal errors.
location ~* "{{config.nginx.location}}" {
  root {{config.nginx.root}};
  internal;

  {{#config.nginx.lua}}
  # Checks is CID is set, if not then set it.
  # CID is then logged in my log file, variable $cid is available everywhere

  # Also create UUID for every request, and log it.

  # The variables is then injected into server error pages and javascript can then access them
  # there is more than than just lua to get this to work, i might upload a sample

    {{#config.nginx.body_filter_by_lua}}
      ## Lua inline config
      body_filter_by_lua '
        {{config.nginx.body_filter_by_lua}}
      ';
    {{/config.nginx.body_filter_by_lua}}

    {{#config.nginx.body_filter_by_lua_file}}
      ## Include lua file
      body_filter_by_lua_file {{config.nginx.body_filter_by_lua_file}};
    {{/config.nginx.body_filter_by_lua_file}}


    {{#config.nginx.header_filter_by_lua}}
      header_filter_by_lua '
        {{config.nginx.header_filter_by_lua}}
      ';
    {{/config.nginx.header_filter_by_lua}}

    {{#config.nginx.header_filter_by_lua_file}}
      header_filter_by_lua_file {{config.nginx.header_filter_by_lua_file}};
    {{/config.nginx.header_filter_by_lua_file}}
  {{/config.nginx.lua}}
}
