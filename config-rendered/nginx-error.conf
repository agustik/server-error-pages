# NGINX config

proxy_intercept_errors on; # Intercept errors, and return this error pages

limit_req_status 429; ## Standard for rate limit


  # Error page 
  error_page 403 = /var/www/403-error.html;
  # Error page 
  error_page 404 = /var/www/404-error.html;
  # Error page 
  error_page 405 = /var/www/405-error.html;
  # Error page 
  error_page 429 = /var/www/429-error.html;
  # Error page 
  error_page 494 = /var/www/494-error.html;
  # Error page 
  error_page 495 = /var/www/495-error.html;
  # Error page 
  error_page 496 = /var/www/496-error.html;
  # Error page 
  error_page 500 = /var/www/500-error.html;
  # Error page 
  error_page 501 = /var/www/501-error.html;
  # Error page 
  error_page 502 = /var/www/502-error.html;
  # Error page 
  error_page 503 = /var/www/503-error.html;
  # Error page 
  error_page maintenance = /var/www/maintenance-error.html;



# Location for internal errors.
location /server-error-pages/ {
  root 
  internal;

  # Checks is CID is set, if not then set it.
  # CID is then logged in my log file, variable $cid is available everywhere

  # Also create UUID for every request, and log it.

  # The variables is then injected into server error pages and javascript can then access them
  # there is more than than just lua to get this to work, i might upload a sample

  ## Lua inline config
      body_filter_by_lua '
        if ngx.var.uuid == nil then
 	ngx.var.uuid = uuid4.getUUID()
 end
 ngx.arg[1] =  ngx.arg[1].gsub(ngx.arg[1], &quot;_uuid_&quot;, ngx.var.uuid) 
 ngx.arg[1] =  ngx.arg[1].gsub(ngx.arg[1], &quot;_cid_&quot;, ngx.var.cid) 

      ';

    ## Include lua file



}
